substitutions:
  friendly_name: Huawei R4850G2
  name: huawei-r4850g2
  mqtt_server: !secret mqtt_server

esphome:
  name: $name
  friendly_name: $friendly_name

  on_boot:
    priority: -100
    then:
      - output.turn_on:
          status_led  
      - output.set_level:
          id: status_led
          level: "50%"

#########################                                                                                                                                                                                                                
# ESP AND NETWORK SETUP                                                                                                                                                                                                                

esp8266:
  board: d1_mini

# pid climate log update is noisy, dial it back to warn                                                                                                                                                                                  
logger:
  level: DEBUG
  logs:
    canbus: WARN

mqtt:
  broker: $mqtt_server
  discovery: true
  discovery_prefix: homeassistant
  log_topic: 
    topic: ${name}/log
    level: WARN

web_server:
  port: 80

# default HA integration, OTA updater and backup http web portal                                                                                                                                                                         
ota:
  on_begin:
    then:
      - logger.log: "OTA start"
  on_progress:
    then:
      - logger.log:
          format: "OTA progress %0.1f%%"
          args: ["x"]
  on_end:
    then:
      - logger.log: "OTA end"

captive_portal:

wifi:
  networks:
  - ssid: <your ssid>
    password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails                                                                                                                                                               
  ap:
    ssid: $name

text_sensor:
  # Send IP Address                                                                                                                                                                                                                      
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: SSID
  - platform: template
    name: Description
    id: description

sensor:
  - platform: template
    name: Input Voltage
    id: input_voltage
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
  - platform: template
    name: Output Voltage
    id: output_voltage
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
  - platform: template
    name: Input Power
    id: input_power
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 1
  - platform: template
    name: Input Frequency
    id: input_frequency
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 1
  - platform: template
    name: Input Current
    id: input_current
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
  - platform: template
    name: Output Current
    id: output_current
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
  - platform: template
    name: Output Current Max
    id: output_current_max
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
  - platform: template
    name: Output Power
    id: output_power
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 1
  - platform: template
    name: Output Temperature
    id: output_temperature
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
  - platform: template
    name: Input Temperature
    id: input_temperature
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
  - platform: template
    name: Efficiency
    id: efficiency
    unit_of_measurement: "%"
    state_class: measurement
    accuracy_decimals: 1

select:
  - platform: template
    name: "Mode"
    id: mode
    optimistic: true
    options:
      - offline
      - online
    initial_option: online
    on_value: 
      then:
        - script.execute:
            id: set_voltage
            volt: !lambda "return id(output_voltage_set).state;" 
        - delay: 1s
        - script.execute:
            id: set_current
            amp: !lambda "return id(output_current_max).state;" 


number:
  - platform: template
    name: "Set Output Voltage"
    id: output_voltage_set
    unit_of_measurement: "V"
    device_class: voltage
    optimistic: true
    min_value: 41.5
    max_value: 58.5
    step: 0.1
    restore_value: true
    on_value:
      then:
        - lambda: |-
            uint16_t y = x * 1024;
            ESP_LOGD("SET VAL out voltage:", "%f %i", x, y );
            std::vector< uint8_t > data1 { 1,0,0,0,0,0, (uint8_t)((y & 0xFF00) >> 8), (uint8_t)(y&0xFF) };
            id(can1)->send_data(0x108180FE, 1, data1);       
  - platform: template
    name: "Default Output Voltage"
    id: default_output_voltage_set
    unit_of_measurement: "V"
    device_class: voltage
    optimistic: true
    restore_value: true
    min_value: 48
    max_value: 58.5
    step: 0.1
    on_value:
      then:
        - lambda: |-
            uint16_t y = x * 1024;
            ESP_LOGD("SET VAL default out voltage:", "%f %i", x, y );
            std::vector< uint8_t > data2 { 1,1,0,0,0,0, (uint8_t)((y & 0xFF00) >> 8), (uint8_t)(y&0xFF) };
            id(can1)->send_data(0x108180FE, 1, data2);       
  - platform: template
    name: "Current Limit"
    id: current_limit
    restore_value: true
    unit_of_measurement: "A"
    device_class: current
    optimistic: true
    min_value: 0
    max_value: 50
    step: 0.1
    on_value:
      then:
        - lambda: |-
            uint16_t y = x * 20;
            ESP_LOGD("SET VAL current limit:", "%f %i", x, y );
            std::vector< uint8_t > data3 { 1,3,0,0,0,0, (uint8_t)((y & 0xFF00) >> 8), (uint8_t)(y&0xFF) };
            id(can1)->send_data(0x108180FE, 1, data3);       
  - platform: template
    name: "Default Current Limit"
    id: default_current_limit
    unit_of_measurement: "A"
    device_class: current
    restore_value: true
    optimistic: true
    min_value: 0
    max_value: 50
    step: 0.1
    on_value:
      then:
        - lambda: |-
            uint16_t y = x * 20;
            ESP_LOGD("SET VAL default current limit:", "%f %i", x, y );
            std::vector< uint8_t > data4 { 1,4,0,0,0,0, (uint8_t)((y & 0xFF00) >> 8), (uint8_t)(y&0xFF) };
            id(can1)->send_data(0x108180FE, 1, data4);       

script:
  - id: set_voltage
    parameters:
      volt: float
    then:
      - lambda: |-
          uint16_t y = volt * 1024;
          ESP_LOGD("SET VAL out voltage:", "%f %i", volt, y );
          std::vector< uint8_t > data1 { 1,0,0,0,0,0, (uint8_t)((y & 0xFF00) >> 8), (uint8_t)(y&0xFF) };
          id(can1)->send_data(0x108180FE, 1, data1);       
  - id: set_current
    parameters:
      amp: float
    then:
      - lambda: |-
          uint16_t y = amp * 20;
          ESP_LOGD("SET VAL current limit:", "%f %i", amp, y );
          std::vector< uint8_t > data3 { 1,3,0,0,0,0, (uint8_t)((y & 0xFF00) >> 8), (uint8_t)(y&0xFF) };
          id(can1)->send_data(0x108180FE, 1, data3);       

spi:
  id: spi1
  clk_pin: GPIO14
  mosi_pin: GPIO13
  miso_pin: GPIO12

canbus:
  - platform: mcp2515
    cs_pin: GPIO15
    id: can1
    spi_id: spi1
    can_id: 0x108040FE
    bit_rate: 125kbps
    use_extended_id: true
    on_frame:
    - can_id: 0x1081D27F  # description
      use_extended_id: true  
      then:
        - lambda: |-
            ESP_LOGD("CAN DESCRIPT", "%02x%02x%02x%02x%02x%02x%02x%02x", x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7] );
            char val[7] = {x[2],x[3],x[4],x[5],x[6],x[7],0};
            id(description).publish_state(val);
    - can_id: 0x1081807E  # ack
      use_extended_id: true
      then:
        - lambda: |-
            if( x[0] == 0x21 ) {
              ESP_LOGD("CAN ACK ERROR", "%02x", x[0]);
            } else {
              ESP_LOGD("CAN ACK SUCESS", "%02x", x[0]);
            }
    - can_id: 0x1081407F  # data
      use_extended_id: true
      then:
        - lambda: |-
            auto reg = x[0]<<8 | x[1];
            auto val = ( x[4]<<24 | x[5]<<16 | x[6]<<8 | x[7] ) / 1024.0;
            switch( reg ) {
              case 0x0170:
                id(input_power).publish_state(val);
                break;
              case 0x0171:
                id(input_frequency).publish_state(val);
                break;
              case 0x0172:
                id(input_current).publish_state(val);
                break;
              case 0x0173:
                id(output_power).publish_state(val);
                break;
              case 0x0174:
                id(efficiency).publish_state( val*100 );
                break;
              case 0x0175:
                id(output_voltage).publish_state(val);
                break;
              case 0x0176:
                id(output_current_max).publish_state(( x[4]<<24 | x[5]<<16 | x[6]<<8 | x[7] )/20.0);
                break;
              case 0x0178:
                id(input_voltage).publish_state(val);
                break;
              case 0x017f:
                id(output_temperature).publish_state(val);
                break;
              case 0x0180:
                id(input_temperature).publish_state(val);
                break;
              case 0x0181:
                id(output_current).publish_state(val);
                break;
            }
#    - can_id: 0x1001117e.  #ahr see https://github.com/craigpeacock/Huawei_R4850G2_CAN/blob/main/r4850.c#L440
#      use_extended_id: true
#      then:
#        - lambda: |-
#            ESP_LOGD("CAN 0x1001117e", "%02x%02x%02x%02x%02x%02x%02x%02x", x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7] );

interval:
  - interval: 5sec
    then:
    - lambda: |-
        std::vector< uint8_t > data5 { 0,0,0,0,0,0,0,0 };
        if( id(mode).state == "online" ) {
          id(can1)->send_data(0x108040FE, 1, data5);  
        }

output:
  # internal led
  - platform: slow_pwm
    pin: D4
    id: status_led
    period: 2s
    inverted: true

button:
  # Expose an ESP32 restart button to HA                                                                                                                                                                                                 
  - platform: restart
    name: "Restart"